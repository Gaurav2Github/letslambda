{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "A template for letslambda - 0.1",
    "Parameters": {
        "Bucket": {
            "Description": "S3 Bucket name (not arn)",
            "Type": "String"
        },
	"Region": {
            "Description": "Region short code name where the S3 bucket is located (ie: eu-west-1)",
            "Type": "String"
	},
        "KmsEncryptionKeyArn": {
            "Description": "KMS Encryption Key ARN used to securely encrypt and decrypt",
            "Type": "String"
        }
    },
    "Resources" : {
        "DenyUnEncryptedPrivKeyUploadsBucketPolicy" : {
            "Type" : "AWS::S3::BucketPolicy",
            "Properties" : {
                "Bucket" : {"Ref" : "Bucket"},
                "PolicyDocument": {
                    "Statement":[{
                        "Sid": "DenyUnEncryptedPrivKeyUploads",
                        "Action": ["s3:PutObject"],
                        "Effect": "Deny",
                        "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "Bucket" } , "/*.key.pem" ]]},
                        "Principal": "*",
                        "Condition": {
                            "Null": {
                                "s3:x-amz-server-side-encryption": "true"
                            }
                        }
                    }]
                }
            }
        },
        "LetsLambdaKmsKeyManagedPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description" : "Allow lambda and selected EC2 instances to access the letslambda KMS key",
                "Path" : "/",
                "PolicyDocument" : {
                    "Version":"2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "kms:Decrypt",
                                "kms:DescribeKey",
                                "kms:Encrypt",
                                "kms:GenerateDataKey*",
                                "kms:ReEncrypt*"
                            ],
                            "Resource" : [ {"Ref": "KmsEncryptionKeyArn"} ]
                        }
                    ]
                }
            }
        },
        "LetsLambdaS3ManagedPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description" : "Allow lambda and selected EC2 instances to access the letslambda KMS key",
                "Path" : "/",
                "PolicyDocument" : {
                    "Version":"2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "s3:putObject",
                                "s3:getObject",
                                "s3:ListBucket"
                            ],
                            "Resource" : [
                                {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "Bucket"}]]},
                                {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "Bucket"}, "/*"]]}
                            ]
                        }
                    ]
                }
            }
        },
        "LetsLambdaManagedPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description" : "Allow lambda to access bucket, r53 and elb",
                "Path" : "/",
                "PolicyDocument" : {
                    "Version":"2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "logs:DescribeLogStreams",
                                "iam:UploadServerCertificate",
                                "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
                                "route53:GetChange",
                                "route53:GetHostedZone",
                                "route53:ListHostedZones",
                                "route53:ListResourceRecordSets",
                                "route53:ChangeResourceRecordSets"
                            ],
                            "Resource" : [ "*" ]
                        }
                    ]
                }
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    {"Ref": "LetsLambdaManagedPolicy"},
                    {"Ref": "LetsLambdaS3ManagedPolicy"},
                    {"Ref": "LetsLambdaKmsKeyManagedPolicy"}
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": ["lambda.amazonaws.com"]
                            },
                            "Action": ["sts:AssumeRole"]
                        }
                    ]
                }
            }
        },
        "LetsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties" : {
                "Description" : "Renew all certificates from configuration via letsencrypt ACME",
                "Handler" : "letslambda.lambda_handler",
                "MemorySize" : 128,
                "Role" : {"Fn::GetAtt" : ["LambdaExecutionRole", "Arn"]},
                "Runtime" : "python2.7",
                "Timeout" : "240",
                "Code": {
                    "S3Bucket": {"Ref": "Bucket"},
                    "S3Key": "letslambda.zip"
                }
            }
        },
        "Scheduler": {
            "Type" : "AWS::Events::Rule",
            "Properties" : {
                "Description" : "Monthly scheduler for certificate renewal",
                "Name" : "LetsLambda-Scheduler",
                "ScheduleExpression" : "rate(30 days)",
                "State" : "ENABLED",
                "Targets" : [ {
                    "Arn": {"Fn::GetAtt": ["LetsLambdaFunction", "Arn"]},
                    "Id": "LetsLambdaTarget",
                    "Input": {"Fn::Join": ["", ["{\"bucket\": \"", {"Ref": "Bucket"}, ", \"region\": \"", {"Ref": "Region"}, "\"}"]]}
                } ]
            }
        }
    },
    "Outputs": {
    }
}
